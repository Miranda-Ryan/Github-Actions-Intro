name: Deploy Project
on:
  push:
    branches:
      # This workflow is triggered when a push to dev/<xyz_branch_name> is made
      - "dev/**"

jobs:
  run_test:
    name: Run tests
    runs-on: ubuntu-latest
    # outputs:
    #   can_unpack: ${{ steps.set_unpack.outputs.can_unpack }}
    steps:
      # Each step is an action that will get executed during this job run
      # Checkout code from github repository
      - name: Checkout code
        uses: actions/checkout@v4
      # Install NodeJS v21
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 21
      # Cache node_modules dependencies for other jobs to reuse
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # Path used by linux runner to store npm modules
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      # Install npm dependencies
      - name: Install dependencies
        run: npm ci
      # Run tests
      - name: Run tests
        id: run-tests
        run: npm run test
      # Upload coverage reports as artifacts if tests fail
      - name: Publish coverage reports
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage
      # Set an output variable (to be used in later section when working with if())
      # - name: Set unpack variable
      #   id: set_unpack
      #   run: echo "can_unpack=true" >> "$GITHUB_OUTPUT"
      # # Display unpack variable
      # - name: Display unpack variable
      #   run: echo "Can next job unpack? ${{ steps.set_unpack.outputs.can_unpack }}"

  unpack:
    name: Unpack artifacts
    runs-on: ubuntu-latest
    needs: run_test
    if: failure()
    steps:
      # - name: Display output variable from test job
      #   run: echo "${{ needs.run_test.outputs.can_unpack }}"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
      - name: Display coverage report contents
        run: ls -R

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # To avoid jobs from running in parallel, use needs: <dependent_job_name>
    needs: run_test
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 21
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Deploy
        run: echo "Deploying!"
